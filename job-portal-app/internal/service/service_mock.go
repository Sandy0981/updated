// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=service
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	models "job-portal-api/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ApplicationProcessor mocks base method.
func (m *MockUserService) ApplicationProcessor(ctx context.Context, job []models.RequestJob) ([]models.RequestJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationProcessor", ctx, job)
	ret0, _ := ret[0].([]models.RequestJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationProcessor indicates an expected call of ApplicationProcessor.
func (mr *MockUserServiceMockRecorder) ApplicationProcessor(ctx, job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationProcessor", reflect.TypeOf((*MockUserService)(nil).ApplicationProcessor), ctx, job)
}

// CreateCompanyService mocks base method.
func (m *MockUserService) CreateCompanyService(ctx context.Context, companyData models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyService", ctx, companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompanyService indicates an expected call of CreateCompanyService.
func (mr *MockUserServiceMockRecorder) CreateCompanyService(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyService", reflect.TypeOf((*MockUserService)(nil).CreateCompanyService), ctx, companyData)
}

// CreateJobPostingService mocks base method.
func (m *MockUserService) CreateJobPostingService(ctx context.Context, jobData models.NewJobRequest, cid uint64) (models.NewJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobPostingService", ctx, jobData, cid)
	ret0, _ := ret[0].(models.NewJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobPostingService indicates an expected call of CreateJobPostingService.
func (mr *MockUserServiceMockRecorder) CreateJobPostingService(ctx, jobData, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobPostingService", reflect.TypeOf((*MockUserService)(nil).CreateJobPostingService), ctx, jobData, cid)
}

// GetAllJobPostingsService mocks base method.
func (m *MockUserService) GetAllJobPostingsService(ctx context.Context) ([]models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobPostingsService", ctx)
	ret0, _ := ret[0].([]models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobPostingsService indicates an expected call of GetAllJobPostingsService.
func (mr *MockUserServiceMockRecorder) GetAllJobPostingsService(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobPostingsService", reflect.TypeOf((*MockUserService)(nil).GetAllJobPostingsService), ctx)
}

// GetCompanyService mocks base method.
func (m *MockUserService) GetCompanyService(ctx context.Context, cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyService", ctx, cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyService indicates an expected call of GetCompanyService.
func (mr *MockUserServiceMockRecorder) GetCompanyService(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyService", reflect.TypeOf((*MockUserService)(nil).GetCompanyService), ctx, cid)
}

// GetJobPostingByIDService mocks base method.
func (m *MockUserService) GetJobPostingByIDService(ctx context.Context, jid uint64) (models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobPostingByIDService", ctx, jid)
	ret0, _ := ret[0].(models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobPostingByIDService indicates an expected call of GetJobPostingByIDService.
func (mr *MockUserServiceMockRecorder) GetJobPostingByIDService(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobPostingByIDService", reflect.TypeOf((*MockUserService)(nil).GetJobPostingByIDService), ctx, jid)
}

// ListCompaniesService mocks base method.
func (m *MockUserService) ListCompaniesService(ctx context.Context) ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompaniesService", ctx)
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompaniesService indicates an expected call of ListCompaniesService.
func (mr *MockUserServiceMockRecorder) ListCompaniesService(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompaniesService", reflect.TypeOf((*MockUserService)(nil).ListCompaniesService), ctx)
}

// ListJobsForCompanyService mocks base method.
func (m *MockUserService) ListJobsForCompanyService(ctx context.Context, cid uint64) ([]models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsForCompanyService", ctx, cid)
	ret0, _ := ret[0].([]models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsForCompanyService indicates an expected call of ListJobsForCompanyService.
func (mr *MockUserServiceMockRecorder) ListJobsForCompanyService(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsForCompanyService", reflect.TypeOf((*MockUserService)(nil).ListJobsForCompanyService), ctx, cid)
}

// RegisterUserService mocks base method.
func (m *MockUserService) RegisterUserService(ctx context.Context, userData models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUserService", ctx, userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUserService indicates an expected call of RegisterUserService.
func (mr *MockUserServiceMockRecorder) RegisterUserService(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserService", reflect.TypeOf((*MockUserService)(nil).RegisterUserService), ctx, userData)
}

// UserLoginService mocks base method.
func (m *MockUserService) UserLoginService(ctx context.Context, userData models.NewUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLoginService", ctx, userData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLoginService indicates an expected call of UserLoginService.
func (mr *MockUserServiceMockRecorder) UserLoginService(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLoginService", reflect.TypeOf((*MockUserService)(nil).UserLoginService), ctx, userData)
}
